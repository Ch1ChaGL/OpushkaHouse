generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  roleId Int @map("role_id") @id
  name String 
  users User[]
  status Status[]
}

model User {
  userId Int @id @default(autoincrement()) @map("user_id")
  password String @map("password")
  firstName String @map("first_name")
  lastName String @map("last_name")
  phone String @unique @map("phone")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  roleId Int @map("role_id")
  role Role @relation(fields: [roleId], references: [roleId])
  loginLogs LoginLog[]
}

model HouseType {
  houseTypeId Int @id @map("house_id")
  name String
  houses House[]
}


model House {
  houseId      Int          @id @map("house_id")
  houseTypeId  Int          @map("house_type_id")
  peopleCount  Int          @map("people_count")
  houseStatus  HouseStatus[]
  houseType    HouseType    @relation(fields: [houseTypeId], references: [houseTypeId])
}

model Status {
  statusId     Int          @id @map("status_id")
  name         String
  roleId       Int          @map("role_id")
  houseStatus  HouseStatus[]
  role         Role         @relation(fields: [roleId], references: [roleId])
}

model HouseStatus {
  houseId      Int          @map("house_id")
  statusId     Int          @map("status_id")
  time         DateTime?     
  house        House        @relation(fields: [houseId], references: [houseId])
  status       Status       @relation(fields: [statusId], references: [statusId])

  @@id([houseId, statusId])
}

model LoginLog{
  id         Int       @id @default(autoincrement())
  userId     Int
  username   String
  action     String    // "login" или "logout"
  timestamp  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [userId])
}